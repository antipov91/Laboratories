//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public ActivePlacementAddedListenerComponent ActivePlacementAddedListener { get { return (ActivePlacementAddedListenerComponent)GetComponent(GameComponentsLookup.ActivePlacementAddedListener); } }
	public bool HasActivePlacementAddedListener { get { return HasComponent(GameComponentsLookup.ActivePlacementAddedListener); } }

	public void AddActivePlacementAddedListener(System.Collections.Generic.List<IActivePlacementAddedListener> newValue)
	{
		var index = GameComponentsLookup.ActivePlacementAddedListener;
		var component = (ActivePlacementAddedListenerComponent)CreateComponent(index, typeof(ActivePlacementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceActivePlacementAddedListener(System.Collections.Generic.List<IActivePlacementAddedListener> newValue)
	{
		var index = GameComponentsLookup.ActivePlacementAddedListener;
		var component = (ActivePlacementAddedListenerComponent)CreateComponent(index, typeof(ActivePlacementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyActivePlacementAddedListenerTo(ActivePlacementAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.ActivePlacementAddedListener;
		var component = (ActivePlacementAddedListenerComponent)CreateComponent(index, typeof(ActivePlacementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveActivePlacementAddedListener()
	{
		RemoveComponent(GameComponentsLookup.ActivePlacementAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherActivePlacementAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> ActivePlacementAddedListener
	{
		get
		{
			if (_matcherActivePlacementAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.ActivePlacementAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherActivePlacementAddedListener = matcher;
			}

			return _matcherActivePlacementAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddActivePlacementAddedListener(IActivePlacementAddedListener value)
	{
		var listeners = HasActivePlacementAddedListener
			? ActivePlacementAddedListener.value
			: new System.Collections.Generic.List<IActivePlacementAddedListener>();
		listeners.Add(value);
		ReplaceActivePlacementAddedListener(listeners);
	}

	public void RemoveActivePlacementAddedListener(IActivePlacementAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = ActivePlacementAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveActivePlacementAddedListener();
		}
		else
		{
			ReplaceActivePlacementAddedListener(listeners);
		}
	}
}
