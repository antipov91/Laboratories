//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class UiComponentsLookup
{
	public const int DeviceSettings = 0;
	public const int InvokeRadialMenuCommand = 1;
	public const int Manager = 2;
	public const int PauseMenu = 3;
	public const int RadialMenu = 4;
	public const int Researches = 5;

	public const int TotalComponents = 6;

	public static readonly string[] ComponentNames =
	{
		"DeviceSettings",
		"InvokeRadialMenuCommand",
		"Manager",
		"PauseMenu",
		"RadialMenu",
		"Researches"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Laboratories.Components.Ui.DeviceSettingsComponent),
		typeof(Laboratories.Components.Ui.InvokeRadialMenuCommandComponent),
		typeof(Laboratories.Components.Ui.ManagerComponent),
		typeof(Laboratories.Components.Ui.PauseMenuComponent),
		typeof(Laboratories.Components.Ui.RadialMenuComponent),
		typeof(Laboratories.Components.Ui.ResearchesComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Laboratories.Components.Ui.DeviceSettingsComponent), 0 },
		{ typeof(Laboratories.Components.Ui.InvokeRadialMenuCommandComponent), 1 },
		{ typeof(Laboratories.Components.Ui.ManagerComponent), 2 },
		{ typeof(Laboratories.Components.Ui.PauseMenuComponent), 3 },
		{ typeof(Laboratories.Components.Ui.RadialMenuComponent), 4 },
		{ typeof(Laboratories.Components.Ui.ResearchesComponent), 5 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
